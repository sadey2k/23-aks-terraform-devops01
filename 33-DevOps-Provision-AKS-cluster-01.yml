trigger:
- none

pool: 'TestAgentPool'

steps:
- task: TerraformCLI@0
  displayName: Terraform Init
  inputs:
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifest'
    backendType: 'azurerm'
    backendServiceArm: '33 Azure DevOps Provision AKS cluster 01'
    backendAzureRmSubscriptionId: 'c88c8f23-28fa-446c-9737-a0a749bb194f'
    backendAzureRmResourceGroupName: 'aks-resources-rg'
    backendAzureRmStorageAccountName: 'storageaccountshola'
    backendAzureRmContainerName: 'tfstate'
    backendAzureRmKey: 'aks-base.tfstate'
    allowTelemetryCollection: false

- task: TerraformCLI@0
  inputs:
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifest'
    environmentServiceName: '33 Azure DevOps Provision AKS cluster 01'
    allowTelemetryCollection: false

# Define Varuables for Environments
variables: 
- name:  DEV_ENVIRONMENT
  value: Dev
- name: QA_ENVIRONMENT
  value: qa

stages: 
- stage: TerraformValidate
  jobs:
   - job: TerraformValidateJob
     continueOnError: false
     steps:
      - task: PublishPipelineArtifact@1
        displayName: Publish Artifacts
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          artifact: 'terraform-manifests-out2'
          publishLocation: 'pipeline'
      - task: TerraformCLI@0
        displayName: Terraform Init
        inputs:
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          backendType: 'azurerm'
          backendServiceArm: '33 Azure DevOps Provision AKS cluster 01'
          backendAzureRmSubscriptionId: 'c88c8f23-28fa-446c-9737-a0a749bb194f'
          backendAzureRmResourceGroupName: 'aks-resources-rg'
          backendAzureRmStorageAccountName: 'storageaccountshola'
          backendAzureRmContainerName: 'tfstate'
          backendAzureRmKey: 'aks-base.tfstate'
          allowTelemetryCollection: false
      - task: TerraformCLI@0
        displayName: Terraform Validate
        inputs:
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          allowTelemetryCollection: false


# Stage-2: Deploy Stages for Dev & QA
# Deployment-1: Deploy Dev AKS Cluster
## Step-1: Define Variables for environments
## Step-2: Download SSH Secure File
## Step-3: Terraform Initialize (State Storage to store in Azure Storage Account for Dev AKS Cluster)
## Step-4: Terraform Plan (Create Plan)
## Step-5: Terraform Apply (Use the plan created in previous step)

- stage: DeployAKSClusters
  jobs:
    - deployment: DeployDevAKSCluster
      displayName: DeployDevAKSCluster
      pool: 'TestAgentPool'
      environment: $(DEV_ENVIRONMENT)      
      strategy:
        runOnce:
          deploy:
            steps:            
            - task: DownloadSecureFile@1
              displayName: Download SSH Key
              name: sshkey
              inputs:
                secureFile: 'aksprodsshkey.pub'
            - task: TerraformCLI@0
              displayName: Terraform Init
              inputs:
                command: 'init'
                workingDirectory: '$(Pipieline.Workspace)/terraform-manifests'
                backendType: 'azurerm'
                backendServiceArm: '33 Azure DevOps Provision AKS cluster 01'
                backendAzureRmSubscriptionId: 'c88c8f23-28fa-446c-9737-a0a749bb194f'
                backendAzureRmResourceGroupName: 'aks-resources-rg'
                backendAzureRmStorageAccountName: 'storageaccountshola'
                backendAzureRmContainerName: 'tfstate'
                backendAzureRmKey: 'aks-$(ENV_ENVIRONMENT).tfstate'
                allowTelemetryCollection: false
            - task: TerraformCLI@0
              displayName: Terraform Plan
              inputs:
                command: 'plan'
                workingDirectory: '$(Pipieline.Workspace)/terraform-manifests'
                environmentServiceName: '33 Azure DevOps Provision AKS cluster 01'
                commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(DEV_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                allowTelemetryCollection: false
            - task: TerraformCLI@0
              displayName: Terraform Apply
              inputs:
                command: 'apply'
                workingDirectory: '$(Pipieline.Workspace)/terraform-manifests'
                environmentServiceName: '33 Azure DevOps Provision AKS cluster 01'
                commandOptions: '$(Pipieline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                allowTelemetryCollection: false

