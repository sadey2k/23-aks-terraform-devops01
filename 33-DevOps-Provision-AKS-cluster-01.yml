trigger:
- none

pool: 'TestAgentPool'

# Define Varuables for Environments
variables: 
- name:  DEV_ENVIRONMENT
  value: Dev
- name: QA_ENVIRONMENT
  value: qa

stages: 
- stage: TerraformValidate
  jobs:
   - job: TerraformValidateJob
     continueOnError: false
     steps:
      - task: PublishPipelineArtifact@1
        displayName: Publish Artifacts
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          artifact: 'terraform-manifests-out'
          publishLocation: 'pipeline'
      - task: TerraformCLI@0
        displayName: Terraform Init
        inputs:
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          backendType: 'azurerm'
          backendServiceArm: '33 Azure DevOps Provision AKS cluster 01'
          backendAzureRmSubscriptionId: 'c88c8f23-28fa-446c-9737-a0a749bb194f'
          backendAzureRmResourceGroupName: 'aks-resources-rg'
          backendAzureRmStorageAccountName: 'storageaccountshola'
          backendAzureRmContainerName: 'tfstate'
          backendAzureRmKey: 'aks-base.tfstate'
          allowTelemetryCollection: false
      - task: TerraformCLI@0
        displayName: Terraform Validate
        inputs:
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          allowTelemetryCollection: false

- stage:  DeployAKSClusters
  jobs:
  - deployment: DeployDevAKSCluster
    displayName: DeployDevAKSCluster
    pool: 'TestAgentPool'
    environment: $(DEV_ENVIRONMENT)
    strategy: 
      runOnce:
        deploy:
          steps:
          - task: DownloadSecureFile@1
            displayName:  Download SSH Key
            name: sshkey
            inputs:
              secureFile: 'aksprodsshkey.pub'
          - task: TerraformCLI@0
            displayName: Terraform Init
            inputs:
              command: 'init'
              workingDirectory: '$(Pipieline.Workspace)/terraform-manifests-out'
              backendType: 'azurerm'
              backendServiceArm: '33 Azure DevOps Provision AKS cluster 01'
              backendAzureRmSubscriptionId: 'c88c8f23-28fa-446c-9737-a0a749bb194f'
              backendAzureRmResourceGroupName: 'aks-resources-rg'
              backendAzureRmStorageAccountName: 'storageaccountshola'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'aks-$(ENV_ENVIRONMENT).tfstate'
              allowTelemetryCollection: false
          - task: TerraformCLI@0
            displayName: Terraform Plan
            inputs:
              command: 'plan'
              workingDirectory: '$(Pipieline.Workspace)/terraform-manifests-out'
              environmentServiceName: '33 Azure DevOps Provision AKS cluster 01'
              commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(DEV_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
              allowTelemetryCollection: false
          - task: TerraformCLI@0
            displayName: Terraform Apply
            inputs:
              command: 'apply'
              workingDirectory: '$(Pipieline.Workspace)/terraform-manifests-out'
              commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
              allowTelemetryCollection: false